---
  - name: Automate host key acceptance
    hosts: all
    gather_facts: false
    tasks:
      - name: Add host keys to known_hosts (skip localhost)
        shell: "ssh-keyscan -H {{ hostvars[item].ansible_host }} >> ~/.ssh/known_hosts"
        delegate_to: localhost
        run_once: true
        with_items: "{{ groups['all'] }}"
        become: false
        
  - name: Set cluster nodes
    hosts: all
    become: yes
    tasks:

      - name: Install dependencies
        apt:
          name:
            - apt-transport-https
            - curl
            - containerd
          state: present
          update_cache: yes
      
      # - name: Generate containerd config on remote host
      #   command: containerd config default
      #   args:
      #     creates: /etc/containerd/config.toml
      #   register: containerd_config
      
      - name: Generate containerd config
        shell: |
          mkdir -p /etc/containerd
          containerd config default > /etc/containerd/config.toml
      
      - name: Enable SystemdCgroup in containerd config
        replace:
          path: /etc/containerd/config.toml
          regexp: 'SystemdCgroup = false'
          replace: 'SystemdCgroup = true'
      
      - name: Restart containerd
        service:
          name: containerd
          state: restarted
      
      - name: Ensure containerd is running
        service:
          name: containerd
          state: started
          enabled: true
      ##
      - name: Add Kubernetes GPG key
        apt_key:
          url: https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key
          keyring: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

      - name: Add Kubernetes repository
        apt_repository:
          repo: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /'
          state: present
          filename: kubernetes

      - name: Disable swap
        command: swapoff -a
      
      - name: Comment out swap in fstab
        replace:
          path: /etc/fstab
          regexp: '^([^#].* swap .P)$'
          replace: '# \1'

      
      - name: Ensure overlay module is loaded
        modprobe:
          name: overlay
          state: present
        
      - name: Ensure br_netfilter module is loaded
        modprobe:
          name: br_netfilter
          state: present

      - name: Set up sysctl parameters
        copy:
          dest: /etc/sysctl.d/k8s.conf
          content: |
            net.bridge.bridge-nf-call-iptables  = 1
            net.bridge.bridge-nf-call-ip6tables = 1
            net.ipv4.ip_forward                 = 1
        notify: Reload sysctl


    handlers:
      - name: Reload sysctl
        command: sysctl --system

  

  
  #############################
  - name: Set up master node
    hosts: master
    become: yes
    vars:
      pod_network_cidr: 10.244.0.0/16

    tasks:

      - name: Install Kubernetes packages
        apt:
          name:
            - kubectl
            - kubeadm
            - kubelet
          state: present
      
      - name: Hold Kubernetes packages
        dpkg_selections:
          name: "{{ item }}"
          selection: hold
        loop:
          - kubectl
          - kubeadm
          - kubelet
      
      - name: Check if Kubernetes is already initialized
        stat:
          path: /etc/kubernetes/admin.conf
        register: kubeadm_init_check
      
      - name: Initialize Kubernetes cluster
        shell: kubeadm init --pod-network-cidr={{ pod_network_cidr }}
        when: not kubeadm_init_check.stat.exists
        register: kubeadm_init
        changed_when: kubeadm_init.rc == 0
      
      - name: Retrieve or generate kubeadm join command
        shell: kubeadm token create --print-join-command
        register: join_command_result
        changed_when: false

      - name: Store join command in temporary host
        add_host:
          name: k8s_join_holder
          groups: temp_kubernetes_info
          k8s_join_command: "{{ join_command_result.stdout }}"
        run_once: true
        when: join_command_result.stdout is defined and join_command_result.stdout | length > 0

      - name: Set KUBECONFIG for azureuser
        become_user: root
        become: true
        shell: |
          mkdir -p /home/{{ ansible_user }}/.kube
          cp /etc/kubernetes/admin.conf /home/{{ ansible_user }}/.kube/config
          chown {{ ansible_user }}:{{ ansible_user }} /home/{{ ansible_user }}/.kube/config
      
      - name: Wait for Kubernetes API to be ready
        command: kubectl get nodes
        register: api_ready

        environment:
          KUBECONFIG: /etc/kubernetes/admin.conf
        until: api_ready.rc == 0
        retries: 20
        delay: 10
        when: kubeadm_init is defined or kubeadm_init_check.stat.exists

      - name: Install CNI - Flannel
        environment:
          KUBECONFIG: /etc/kubernetes/admin.conf
        command: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
        when: kubeadm_init is defined or kubeadm_init_check.stat.exists
  
  
  ############################
  - name: Set up worker nodes
    hosts: worker
    become: yes
    tasks:


      - name: Install Kubernetes packages
        apt:
          name:
            - kubeadm
            - kubelet
          state: present
      
      - name: Hold Kubernetes packages
        dpkg_selections:
          name: "{{ item }}"
          selection: hold
        loop:
          - kubeadm
          - kubelet
      
      - name: Ensure /var/lib/kubelet directory exists with correct permissions
        file:
          path: /var/lib/kubelet
          state: directory
          owner: root
          group: root
          mode: '0755'
          recurse: yes
      
      - name: Check if node already joined
        stat:
          path: /etc/kubernetes/kubelet.conf
        register: kubelet_config
      
      - name: Join to Kubernetes cluster
        shell: "{{ hostvars['k8s_join_holder'].k8s_join_command }}"
        when: 
          - hostvars['k8s_join_holder'].k8s_join_command is defined
          - hostvars['k8s_join_holder'].k8s_join_command | length > 0
          - not kubelet_config.stat.exists