---
  - name: Set cluster nodes
    hosts: all
    become: yes
    tasks:
      - name: Install dependencies
        apt:
          name:
            - apt-transport-https
            - curl
            - containerd
          state: present
          update_cache: yes
      
      - name: Create /etc/containerd directory
        file:
          path: /etc/containerd
          state: directory
          mode: '0755'
      
      - name: Generate containerd config on remote host
        command: containerd config default
        register: containerd_config
        changed_when: false
      
      - name: Write containerd configuration
        copy:
          content: "{{ containerd_config.stdout }}"
          dest: /etc/containerd/config.toml

      - name: Enable SystemdCgroup in containerd config
        replace:
          path: /etc/containerd/config.toml
          regexp: 'SystemdCgroup = false'
          replace: 'SystemdCgroup = true'
      
      - name: Restart containerd
        service:
          name: containerd
          state: restarted
      
      - name: Add Kubernetes GPG key
        apt_key:
          url: https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key
          keyring: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

      - name: Add Kubernetes repository
        apt_repository:
          repo: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /'
          state: present

      - name: Disable swap
        shell: |
          sudo swapoff -a
          sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
      
      - name: load kernel modules
        shell: |
          sudo modprobe overlay
          sudo modprobe br_netfilter

      - name: Set up sysctl parameters
        copy:
          dest: /etc/sysctl.d/k8s.conf
          content: |
            net.bridge.bridge-nf-call-iptables  = 1
            net.bridge.bridge-nf-call-ip6tables = 1
            net.ipv4.ip_forward                 = 1
        notify: Reload sysctl


    handlers:
      - name: Reload sysctl
        command: sysctl --system

  

  
  #############################
  - name: Set up master node
    hosts: k8s_master
    become: yes
    tasks:

      - name: Install Kubernetes packages
        apt:
          name:
            - kubectl
            - kubeadm
            - kubelet
          state: present
      
      - name: Hold Kubernetes packages
        command: echo "{{ item }} hold" | sudo dpkg --set-selections
        # ansible.builtin.dpkg_selections:
        #   name: "{{ item }}"
        #   selection: hold
        loop:
          - kubectl
          - kubeadm
          - kubelet
      
      - name: Check if Kubernetes is already initialized
        stat:
          path: /etc/kubernetes/admin.conf
        register: kubeadm_init_check
      
      - name: Initialize Kubernetes cluster
        shell: kubeadm init --pod-network-cidr=10.244.0.0/16
        when: not kubeadm_init_check.stat.exists
        register: kubeadm_init
        changed_when: kubeadm_init.rc == 0
      
      - name: Retrieve or generate kubeadm join command
        shell: kubeadm token create --print-join-command
        register: join_command
        changed_when: false

      - name: Save kubeadm join command for worker nodes to use
        set_fact:
          join_command: "{{ join_command.stdout }}"
      
      - name: Set KUBECONFIG for root user
        shell: |
          mkdir -p /root/.kube
          cp -f /etc/kubernetes/admin.conf /root/.kube/config
          chown root:root /root/.kube/config
        when: kubeadm_init is defined or kubeadm_init_check.stat.exists
          # export KUBECONFIG=$HOME/.kube/admin.config
        # If in shell, the export KUBECONFIG=... only applies inside the task and doesn't persist.
      
      - name: Export KUBECONFIG
        lineinfile:
          path: /root/.bashrc
          line: 'export KUBECONFIG=/root/.kube/config'
          create: yes

      
      # ??
      # - name: Set KUBECONFIG permissions for user
      #   file:
      #     path: /etc/kubernetes/admin.conf
      #     owner: azureuser
      #     group: azureuser
      #     mode: '0644'
      
      # - name: Ensure KUBECONFIG is available for user
      #   lineinfile:
      #     path: /home/azureuser/.bashrc
      #     line: 'export KUBECONFIG=/etc/kubernetes/admin.conf'
      # ??

      # - name: Wait for Kubernetes API to be available
      #   wait_for:
      #     port: 6443
      #     host: localhost
      #     delay: 15
      #     timeout: 120
      #   when: kubeadm_init is defined or kubeadm_init_check.stat.exists

      # Alternative to wait_for:
      - name: Wait for Kubernetes API to be ready
        command: kubectl get nodes
        register: api_ready
        until: api_ready.rc == 0
        retries: 20
        delay: 10
        when: kubeadm_init is defined or kubeadm_init_check.stat.exists

      - name: Install CNI - Flannel
        command: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
        when: kubeadm_init is defined or kubeadm_init_check.stat.exists
  
  
  ############################
  - name: Set up worker nodes
    hosts: k8s_nodes
    become: yes
    tasks:

      - name: Install Kubernetes packages
        apt:
          name:
            - kubeadm
            - kubelet
          state: present
      
      - name: Hold Kubernetes packages
        command: echo "{{ item }} hold" | sudo dpkg --set-selections
        loop:
          - kubeadm
          - kubelet
      
      - name: Join to Kubernetes cluster
        shell: "{{ hostvars['k8s_master'].join_command }}"
        when: hostvars['k8s_master'].join_command is defined

      



# - name: Ensure .kube directory exists
#   file:
#     path: /root/.kube
#     state: directory
#     mode: '0755'

# - name: Copy Kubernetes config file
#   copy:
#     src: /etc/kubernetes/admin.conf
#     dest: /root/.kube/config
#     owner: root
#     group: root
#     mode: '0644'

# - name: Export KUBECONFIG in bashrc
#   lineinfile:
#     path: /root/.bashrc
#     line: 'export KUBECONFIG=/root/.kube/config'
#     create: yes
